#!/usr/bin/env node


/**
 * Module dependencies.
 */
let mysql = require('mysql2')
let app = require('../app')
let debug = require('debug')('backproject:server')
let http = require('http')
const keys = require('../keys/index')


const connectionMysql = mysql.createConnection({
  host:'localhost',
  user: 'root',
  password: "qwerty"
})
connectionMysql.connect(function(err){
  if(err) {
    return console.error("Ошибка: "+ err.message)
  }else {
    console.log("Подключение к серверу MySQL установаленно")
  }
})
connectionMysql.query('SHOW DATABASES;',
    function(err, results, fields) {
  if(err){
    return console.error('Ошибка при чтении списка баз данных' + err)
  }else{
    let NAME_DB = 'appdb'
    if(results.find((i)=>i.Database===NAME_DB)){
      console.log ( 'база есть')
    }else{
      connectionMysql.query(`CREATE DATABASE ${NAME_DB}`,
          function (err) {
            if(err) return console.error('Ошибка при создании базы данных' + err)
          })
    }
  }
    })

/**S
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server =http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
